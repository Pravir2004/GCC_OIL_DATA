# -*- coding: utf-8 -*-
"""projectvisual.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14DiV2HcQQK7bskUe6J6-XbCnRA5N4d0S
"""

# Project Name: Gulf Countries Oil Market Analysis

# Pravir Mishra ( E22BCAU0143 )
# Harsh Chaudhary ( E22BCAU0029 )
# Nakul Chauhan ( E22BCAU0013 )

# Course Name : Digital Marketing and Trend Analysis
# Course Code : CBCA311


# Project Analysis using Python

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

df1 = pd.read_csv('gcc_oil_export_data.csv')

df1

print(df1.isnull().sum())

df1.info()

df1.describe()

X1 = df1[['Export Volume (barrels)', 'Price per Barrel (USD)']]
y1 = df1['Export Revenue (USD)']

X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.2, random_state=42)

model1 = LinearRegression()
model1.fit(X1_train, y1_train)

y1_pred = model1.predict(X1_test)

print("Predictions:", y1_pred)
print("Actual values:", y1_test.values)

df2 = pd.read_csv('revenue_utilization.csv')

df2.head()

print(df2.isnull().sum())

df2.info()

df2.describe()

X2 = df2[['Infrastructure', 'Healthcare', 'Education']]
y2 = df2['Export Revenue (USD)']

X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size=0.2, random_state=42)

model2 = LinearRegression()
model2.fit(X2_train, y2_train)

y2_pred = model2.predict(X2_test)

print("Predictions:", y2_pred)
print("Actual values:", y2_test.values)

df3 = pd.read_csv('tax_utilization_modified.csv')

df3.head()

print(df3.isnull().sum())

df3.info()

df3.describe()

X3 = df3[['Tax Rate per Year']]
y3 = df3['Tax Generated (USD)']

X3_train, X3_test, y3_train, y3_test = train_test_split(X3, y3, test_size=0.2, random_state=42)

model3 = LinearRegression()
model3.fit(X3_train, y3_train)

y3_pred = model3.predict(X3_test)

print("Predictions:", y3_pred)
print("Actual values:", y3_test.values)

import pandas as pd
import plotly.express as px

df1 = pd.read_csv('gcc_oil_export_data.csv')

fig1 = px.scatter(df1, x="Export Volume (barrels)", y="Price per Barrel (USD)", size="Export Revenue (USD)", trendline="ols")
fig1.show()

df2 = pd.read_csv('revenue_utilization.csv')

fig2 = px.scatter(df2, x="Infrastructure", y="Healthcare", size="Education", trendline="ols")
fig2.show()

df3 = pd.read_csv('tax_utilization_modified.csv')


fig3 = px.scatter(df3, x="Tax Rate per Year", y="Tax Generated (USD)", size="Tax Generated (USD)", trendline="ols")
fig3.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df1 = pd.read_csv('gcc_oil_export_data.csv')

# Histogram
plt.figure(figsize=(10, 5))
plt.hist(df1['Export Volume (barrels)'], bins=30, color='blue', alpha=0.7)
plt.title('Histogram of Export Volume')
plt.xlabel('Export Volume (barrels)')
plt.ylabel('Frequency')
plt.show()

# Box plot
plt.figure(figsize=(10, 5))
sns.boxplot(df1['Price per Barrel (USD)'])
plt.title('Box Plot of Price per Barrel')
plt.show()

# Scatter plot
plt.figure(figsize=(10, 5))
plt.scatter(df1['Export Volume (barrels)'], df1['Price per Barrel (USD)'])
plt.title('Scatter Plot of Export Volume vs Price per Barrel')
plt.xlabel('Export Volume (barrels)')
plt.ylabel('Price per Barrel (USD)')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

df2 = pd.read_csv('revenue_utilization.csv')

# Histogram
plt.figure(figsize=(10, 5))
plt.hist(df2['Infrastructure'], bins=30, color='blue', alpha=0.7)
plt.title('Histogram of Infrastructure')
plt.xlabel('Infrastructure')
plt.ylabel('Frequency')
plt.show()

# Box plot
plt.figure(figsize=(10, 5))
sns.boxplot(df2['Healthcare'])
plt.title('Box Plot of Healthcare')
plt.show()

# Scatter plot
plt.figure(figsize=(10, 5))
plt.scatter(df2['Infrastructure'], df2['Healthcare'])
plt.title('Scatter Plot of Infrastructure vs Healthcare')
plt.xlabel('Infrastructure')
plt.ylabel('Healthcare')
plt.show()

df3 = pd.read_csv('tax_utilization_modified.csv')

# Histogram
plt.figure(figsize=(10, 5))
plt.hist(df3['Tax Rate per Year'], bins=30, color='blue', alpha=0.7)
plt.title('Histogram of Tax Rate per Year')
plt.xlabel('Tax Rate per Year')
plt.ylabel('Frequency')
plt.show()

# Box plot
plt.figure(figsize=(10, 5))
sns.boxplot(df3['Tax Generated (USD)'])
plt.title('Box Plot of Tax Generated')
plt.show()

# Scatter plot
plt.figure(figsize=(10, 5))
plt.scatter(df3['Tax Rate per Year'], df3['Tax Generated (USD)'])
plt.title('Scatter Plot of Tax Rate per Year vs Tax Generated')
plt.xlabel('Tax Rate per Year')
plt.ylabel('Tax Generated (USD)')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

df1 = pd.read_csv('gcc_oil_export_data.csv')

# Convert the 'Year' column to datetime format
df1['Year'] = pd.to_datetime(df1['Year'], format='%Y')

# Set the 'Year' column as the index
df1.set_index('Year', inplace=True)

# Plot the data
df1['Export Revenue (USD)'].plot()
plt.title('gcc_oil_export_data.csv')
plt.show()

df2 = pd.read_csv('revenue_utilization.csv')

# Convert the 'Year' column to datetime format
df2['Year'] = pd.to_datetime(df2['Year'], format='%Y')

# Set the 'Year' column as the index
df2.set_index('Year', inplace=True)

# Plot the data
df2['Export Revenue (USD)'].plot()
plt.title('revenue_utilization.csv')
plt.show()

import pandas as pd
from sklearn.linear_model import LinearRegression

data = pd.read_csv('gcc_oil_export_data.csv')

X = data['Year'].values.reshape(-1,1)
y = data['Export Revenue (USD)']

# Create a Linear Regression model and fit it to the data
model = LinearRegression()
model.fit(X, y)

# Predict the Export Revenue (USD) for the years 2023, 2024, and 2025
years = pd.DataFrame([2023, 2024, 2025], columns=['Year'])
predictions = model.predict(years)

print("Predicted Export Revenue (USD) for the years 2023, 2024, and 2025:")
for year, prediction in zip(years['Year'], predictions):
    print(f"Year {year}: {prediction}")

import pandas as pd
from sklearn.linear_model import LinearRegression

data = pd.read_csv('revenue_utilization.csv')

model = LinearRegression()

years = pd.DataFrame([2023, 2024, 2025], columns=['Year'])

# List of columns to predict
columns_to_predict = ['Infrastructure', 'Healthcare', 'Education', 'Other']

for column in columns_to_predict:
    X = data['Year'].values.reshape(-1,1)
    y = data[column]

    model.fit(X, y)

    # Predict the column for the years 2023, 2024, and 2025
    predictions = model.predict(years)

    print(f"Predicted {column} for the years 2023, 2024, and 2025:")
    for year, prediction in zip(years['Year'], predictions):
        print(f"Year {year}: {prediction}")



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

gcc_oil_export_data = pd.read_csv("gcc_oil_export_data.csv")
revenue_utilization = pd.read_csv("revenue_utilization.csv")

merged_data = pd.merge(gcc_oil_export_data, revenue_utilization, on=["Country", "Year"])

merged_data.dropna(inplace=True)

# Exploratory Data Analysis (EDA)
# Visualize the relationship between variables
plt.scatter(merged_data["Export Volume (barrels)"], merged_data["Export Revenue (USD)_x"])
plt.xlabel("Export Volume (barrels)")
plt.ylabel("Export Revenue (USD)")
plt.title("Export Volume vs Export Revenue")
plt.show()

# Statistical Analysis
# Calculate correlation coefficient between Export Volume and Export Revenue
correlation = merged_data["Export Volume (barrels)"].corr(merged_data["Export Revenue (USD)_x"])
print("Correlation between Export Volume and Export Revenue:", correlation)

# Forecasting (Example using ARIMA model for simplicity)
# Prepare data for time series analysis
time_series_data = merged_data.groupby("Year")["Export Volume (barrels)"].sum().values

# Split data into train and test sets
train_size = int(len(time_series_data) * 0.8)
train_data, test_data = time_series_data[:train_size], time_series_data[train_size:]

# Define ARIMA model
model = ARIMA(train_data, order=(5,1,0))
model_fit = model.fit()

# Make predictions
predictions = model_fit.forecast(steps=len(test_data))[0]

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(test_data, predictions))
print("Root Mean Squared Error (RMSE) of ARIMA model:", rmse)

plt.plot(test_data, label='Actual')
plt.plot(predictions, color='red', label='Predicted')
plt.xlabel("Year")
plt.ylabel("Export Volume (barrels)")
plt.title("Actual vs Predicted Export Volume")
plt.legend()
plt.show()